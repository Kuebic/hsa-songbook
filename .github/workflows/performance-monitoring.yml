name: Performance Monitoring

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  
jobs:
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev puppeteer lighthouse
          
      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          
      - name: Start preview server
        run: |
          npm run preview &
          sleep 5
          
      - name: Wait for server
        run: |
          npm install --save-dev wait-on
          npx wait-on http://localhost:4173 -t 30000
          
      - name: Run Lighthouse CI
        id: lighthouse
        run: |
          node scripts/lighthouse-ci.js
        continue-on-error: true
        
      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-reports
          path: lighthouse-reports/
          retention-days: 30
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find the latest report
            const reportsDir = 'lighthouse-reports';
            const files = fs.readdirSync(reportsDir);
            const jsonFiles = files.filter(f => f.endsWith('.json')).sort();
            
            if (jsonFiles.length === 0) {
              console.log('No Lighthouse reports found');
              return;
            }
            
            const latestReport = path.join(reportsDir, jsonFiles[jsonFiles.length - 1]);
            const lhr = JSON.parse(fs.readFileSync(latestReport, 'utf-8'));
            
            // Format scores
            const scores = Object.entries(lhr.categories).map(([key, cat]) => {
              const score = Math.round(cat.score * 100);
              const emoji = score >= 90 ? '‚úÖ' : score >= 50 ? '‚ö†Ô∏è' : '‚ùå';
              return `${emoji} ${cat.title}: **${score}/100**`;
            }).join('\n');
            
            // Format web vitals
            const vitals = [
              `üéØ LCP: **${Math.round(lhr.audits['largest-contentful-paint'].numericValue)}ms**`,
              `‚ö° TBT: **${Math.round(lhr.audits['total-blocking-time'].numericValue)}ms**`,
              `üìä CLS: **${lhr.audits['cumulative-layout-shift'].numericValue.toFixed(3)}**`,
              `üñºÔ∏è FCP: **${Math.round(lhr.audits['first-contentful-paint'].numericValue)}ms**`,
              `üöÄ TTI: **${Math.round(lhr.audits['interactive'].numericValue)}ms**`
            ].join('\n');
            
            const comment = `## üöÄ Lighthouse Performance Report\n\n### Scores\n${scores}\n\n### Core Web Vitals\n${vitals}\n\n---\n*Generated by Lighthouse CI*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Lighthouse Performance Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
      - name: Check performance budgets
        if: steps.lighthouse.outcome == 'failure'
        run: |
          echo "‚ùå Performance budgets exceeded!"
          exit 1
          
  baseline-comparison:
    name: Baseline Comparison
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev puppeteer lighthouse
          
      - name: Checkout main branch baseline
        run: |
          git fetch origin main
          git checkout origin/main -- performance-baseline.json || echo "No baseline found"
          
      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          
      - name: Start preview server
        run: |
          npm run preview &
          sleep 5
          
      - name: Compare with baseline
        id: compare
        run: |
          if [ -f performance-baseline.json ]; then
            node scripts/performance-baseline.js compare
          else
            echo "No baseline found, skipping comparison"
          fi
        continue-on-error: true
        
      - name: Comment comparison results
        if: steps.compare.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = `‚ö†Ô∏è **Performance regression detected!**
            
            Please review the Lighthouse report for details on performance degradation compared to the baseline.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build and analyze bundle
        run: |
          npm run build
          
          # Get bundle sizes
          echo "### Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY
          
          for file in dist/assets/*.js; do
            if [ -f "$file" ]; then
              size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
              gzipped=$(gzip -c "$file" | wc -c | xargs)
              filename=$(basename "$file")
              echo "| $filename | $(echo "scale=2; $size/1024" | bc)KB | $(echo "scale=2; $gzipped/1024" | bc)KB |" >> $GITHUB_STEP_SUMMARY
            fi
          done
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          
      - name: Check bundle size limits
        run: |
          # Check if main bundle exceeds limit
          main_bundle=$(find dist/assets -name "index-*.js" | head -1)
          if [ -f "$main_bundle" ]; then
            size=$(stat -f%z "$main_bundle" 2>/dev/null || stat -c%s "$main_bundle" 2>/dev/null)
            limit=350000  # 350KB limit
            if [ "$size" -gt "$limit" ]; then
              echo "‚ùå Main bundle size ($size bytes) exceeds limit ($limit bytes)"
              exit 1
            fi
          fi
          
  update-baseline:
    name: Update Performance Baseline
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lighthouse]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev puppeteer lighthouse
          
      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          
      - name: Start preview server
        run: |
          npm run preview &
          sleep 5
          
      - name: Update baseline
        run: |
          node scripts/performance-baseline.js create
          
      - name: Commit baseline
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          if git diff --quiet performance-baseline.json; then
            echo "No changes to baseline"
          else
            git add performance-baseline.json
            git commit -m "chore: update performance baseline [skip ci]"
            git push
          fi