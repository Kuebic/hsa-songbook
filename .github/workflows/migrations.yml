name: Database Migrations

on:
  pull_request:
    paths:
      - 'supabase/migrations/**'
      - '!supabase/migrations/README.md'
  push:
    branches:
      - main
    paths:
      - 'supabase/migrations/**'
      - '!supabase/migrations/README.md'

env:
  SUPABASE_VERSION: latest

jobs:
  test-migrations:
    name: Test Migrations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: ${{ env.SUPABASE_VERSION }}
      
      - name: Start Supabase local development
        run: |
          supabase start
          
      - name: Verify migrations can be applied
        run: |
          echo "🔄 Testing migrations on fresh database..."
          supabase db reset
          
      - name: Run migration tests
        run: |
          chmod +x scripts/test-migrations.sh
          ./scripts/test-migrations.sh
      
      - name: Generate types and verify
        run: |
          chmod +x scripts/generate-types.sh
          ./scripts/generate-types.sh
          
      - name: Check TypeScript compilation
        run: npm run build
      
      - name: Upload migration test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: migration-test-results
          path: |
            supabase/.temp/
            supabase/migrations/
            
  preview-migrations:
    name: Preview Migrations
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: test-migrations
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: ${{ env.SUPABASE_VERSION }}
      
      - name: Generate migration preview
        if: vars.SUPABASE_PROJECT_ID != ''
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID }}
        run: |
          echo "🔍 Previewing migrations for PR #${{ github.event.pull_request.number }}"
          supabase link --project-ref $SUPABASE_PROJECT_ID
          
          # Dry run to preview changes
          echo "📋 Migration changes that would be applied:"
          supabase db push --dry-run || true
          
      - name: Comment PR with migration preview
        if: vars.SUPABASE_PROJECT_ID != ''
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🗄️ Database Migration Preview
            
            Migrations have been validated locally. When merged, the following migrations will be applied:
            
            - ✅ All migrations passed syntax validation
            - ✅ Migrations apply cleanly to fresh database
            - ✅ TypeScript types generate successfully
            
            To apply these migrations after merge:
            1. Merge this PR to main
            2. The production deployment workflow will apply migrations
            3. Monitor the deployment for any issues
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  deploy-migrations:
    name: Deploy Migrations to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test-migrations
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: ${{ env.SUPABASE_VERSION }}
      
      - name: Deploy migrations to production
        if: vars.SUPABASE_PROJECT_ID != ''
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID }}
        run: |
          echo "🚀 Deploying migrations to production..."
          
          # Link to production project
          supabase link --project-ref $SUPABASE_PROJECT_ID
          
          # List migrations to be applied
          echo "📋 Migrations to apply:"
          supabase migration list
          
          # Apply migrations to production
          echo "📝 Applying migrations..."
          supabase db push
          
          echo "✅ Migrations deployed successfully!"
          
      - name: Generate and commit updated types
        if: vars.SUPABASE_PROJECT_ID != ''
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID }}
        run: |
          # Generate types from production
          supabase gen types typescript --project-id $SUPABASE_PROJECT_ID > src/lib/database.types.ts
          
          # Check if types changed
          if [[ $(git status --porcelain src/lib/database.types.ts) ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add src/lib/database.types.ts
            git commit -m "chore: update database types after migration"
            git push
          else
            echo "No changes to database types"
          fi
          
      - name: Create deployment notification
        if: vars.SUPABASE_PROJECT_ID != ''
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              description: 'Database migrations applied successfully',
              environment_url: `https://supabase.com/dashboard/project/${process.env.SUPABASE_PROJECT_ID}`
            });

  rollback-on-failure:
    name: Rollback Migrations on Failure
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-migrations
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: ${{ env.SUPABASE_VERSION }}
      
      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Migration Deployment Failed - ${new Date().toISOString()}`,
              body: `## Migration Deployment Failure
              
              The database migration deployment to production has failed.
              
              **Failed Commit:** ${context.sha}
              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              ### Immediate Actions Required:
              
              1. Check the workflow logs for error details
              2. Assess impact on production database
              3. Create a rollback migration if needed
              4. Test rollback locally before applying
              
              ### Rollback Instructions:
              
              \`\`\`bash
              # Create rollback migration
              ./scripts/migrate-down.sh [migration_file_name]
              
              # Test locally
              supabase db reset
              
              # Apply to production when ready
              supabase db push
              \`\`\`
              
              cc: @${context.actor}`,
              labels: ['bug', 'database', 'urgent', 'migration-failure']
            });
            
            console.log(`Created issue #${issue.data.number}`);
            
      - name: Send notification
        if: vars.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"🚨 Database migration failed on production! Check GitHub for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            $SLACK_WEBHOOK_URL